using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Net.Http;using System.Threading.Tasks;using Microsoft.Extensions.Logging;using Newtonsoft.Json;using Newtonsoft.Json.Serialization;using WeatherFF.Common;using WeatherFF.Loader.WeatherProviders.OpenWeatherMap.Dto;namespace WeatherFF.Loader.WeatherProviders.OpenWeatherMap{    public class OpenWeatherMapProvider : IWeatherProvider    {        private readonly ILogger _logger;        private const string ApiKey = "59957517ecb25a59cfaa31eaa6fc770c";        private readonly Uri _apiUri = new Uri("http://api.openweathermap.org");        private readonly Dictionary<string, SkyCondition> _symbolsToConditions = new Dictionary<string, SkyCondition>        {            {"01d", SkyCondition.ClearSky},            {"02d", SkyCondition.FewClouds},            {"03d", SkyCondition.ScatteredClouds},            {"04d", SkyCondition.BrokenClouds},            {"09d", SkyCondition.ShowerRain},            {"10d", SkyCondition.Rain},            {"11d", SkyCondition.Thunderstorm},            {"13d", SkyCondition.Snow},            {"50d", SkyCondition.Mist},            {"01n", SkyCondition.ClearSky},            {"02n", SkyCondition.FewClouds},            {"03n", SkyCondition.ScatteredClouds},            {"04n", SkyCondition.BrokenClouds},            {"09n", SkyCondition.ShowerRain},            {"10n", SkyCondition.Rain},            {"11n", SkyCondition.Thunderstorm},            {"13n", SkyCondition.Snow},            {"50n", SkyCondition.Mist},        };        private readonly Dictionary<string, int> _cityMap = new Dictionary<string, int>        {            {"Minsk, BY", 625144}        };        private readonly JsonSerializer _jsonSerializer;        public OpenWeatherMapProvider(ILogger logger)        {            _logger = logger;            _jsonSerializer = new JsonSerializer            {                ContractResolver = new DefaultContractResolver                {                    NamingStrategy = new SnakeCaseNamingStrategy()                }            };        }        public async Task<IEnumerable<WeatherInfo>> GetWeatherForecastAsync(string city)        {            using (var stream = await GetJsonStreamAsync(city))            {                var dto = _jsonSerializer.Deserialize<WeatherInfoDto>(new JsonTextReader(new StreamReader(stream)));                return Transform(dto, city);            }        }        private async Task<Stream> GetJsonStreamAsync(string city)        {            var client = new HttpClient();            var requestUri = new Uri(_apiUri, $"data/2.5/forecast?id={MapCity(city)}&APPID={ApiKey}&units=metric");            _logger.LogInformation(requestUri.ToString());            return await client.GetStreamAsync(requestUri);        }        private int MapCity(string city)        {            return _cityMap[city];        }        private IEnumerable<WeatherInfo> Transform(WeatherInfoDto data, string city)        {            return data.List.Select(x => new WeatherInfo            {                Provider = "OpenWeatherMap",                City = city,                ForecastTimestamp = x.DtTxt,                Humidity = x.Main.Humidity,                PercipitationType = x.Snow?.ThreeHours != null                    ? PercipitationType.Snow                    : x.Rain?.ThreeHours != null                        ? PercipitationType.Rain                        : PercipitationType.None,                Precipitation3Hours = x.Snow?.ThreeHours ?? x.Rain?.ThreeHours,                Pressure = x.Main.Pressure,                Sky = DecodeSkyCondition(x.Weather.FirstOrDefault()),                TemperatureHigh = x.Main.TempMax,                TemperatureLow = x.Main.TempMin,                WindSpeed = x.Wind.Speed,                WindDirection = x.Wind.Deg.AngleToWindDirection(),                Timestamp = DateTime.UtcNow            });        }        private SkyCondition DecodeSkyCondition(Weather weather)        {            return weather == null ? SkyCondition.Unknown : _symbolsToConditions.GetValueOrDefault(weather.Icon);        }    }}